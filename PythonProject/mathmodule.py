# math
# # ceil-The method ceil() in Python returns a ceiling value of x i.e., the smallest integer greater than or equal to x.
#
#
import math
#
# print(math.ceil(-32.1))
# print(math.ceil(5.1))
# print(math.ceil(5.9))
#
# c = 7
# print(c.__ceil__())
# # rest all the methodsa will be giving error
# --------------------
# # floor() method in Python returns the floor of x i.e., the smallest integer not lesser than x.
# import math
#
# print(math.floor(7))
# print(math.floor(7.9))
# print(math.floor(7.1))
# print(math.floor(-0.5))  # =-1
# c = 444
# print(c.__floor__())
# --------------------
# # copysign
# print(math.copysign(3.4, -0.0))
# print(math.copysign(3.4, -7.8))
# print(math.copysign(-3.4, -7.8))
# -----------------------
# print(math.factorial(5))
# print(math.factorial(1))
# print(math.factorial(0))
# ----------------------
# # absolute value
# print(math.fabs(-8.9))
# --------------------
# # waste
# # nan-not a number
# print(math.isnan(5))
# print(math.isnan('geeta'))  # -> error
# ----------------------
# print(math.lcm(3, 13))
# print(math.gcd(3, 13))
# ---------------
#for previous versions it is different now two functions are same
# a = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
# print(math.fsum(a))
# # 0.8
# print(sum(a))
# # 0.7999999999999999
# ---------------------------
# round(1.5), 7.5, 11, 5 is the
# next
# whole
# no.
# But
# round(10.5), 20.5, 30.5 is the
# previouus
# no.i.e.
# 10, 20, 30
# ---------------------
# import sys
#
# sys.stdout.write('deeps')
# --------------
# import sys
#
#
# def print_to_stderr(*a):
#     # Here a is the array holding the objects
#     # passed as the arguement of the function
#     print(*a, file=sys.stderr)
#
#
# print_to_stderr("Hello World")
# --------------------
# import sys
#
# age = 17
# if age < 18:
#     # exits the program
#     sys.exit("Age less than 18")
# else:
#     print("Age is not less than 18")
# print('bye')
# -------------------------
#
# # sys.modules return the name of the Python modules that the current shell has imported.
# import sys
# print(sys.modules)
# -----------------------
# # sys.getrefcount() method is used to get the reference count for any given object. This value is used by Python as when this value becomes 0, the memory for that particular value is deleted.
#
# import sys
#
# a = 5
# print(sys.getrefcount(a))
# -----
# # or a='deepthi' or a sentances
# ------------------------------
# import sys
#
# print(sys.version)
# print(sys.argv)
# ---------------------------------------
import random
#
# list1 = [1, 2, 3, 4, 5, 6]
# print(random.choice(list1))
# string = "striver"
# print(random.choice(string))
# -----------------------------
# # seed():- Seed function is used to save the state of a random function so that it can generate some random numbers on multiple executions of the code on the same machine or on different machines (for a specific seed value). The seed value is the previous value number generated by the generator. For the first time when there is no previous value, it uses current system time.
#
# print(random.random())
# random.seed(7)
# print("The mapped random number with 5 is : ", end="")
# print(random.random())
# ----------------------------
# sample_list = ['A', 'B', 'C', 'D', 'E']
# random.shuffle(sample_list)
# print(sample_list)
# --------------------
# # uniform(a, b):- This function is used to generate a floating point random number between the numbers mentioned in its arguments. It takes two arguments, lower limit(included in generation) and upper limit(not included in generation).
#
# print("The random floating point number between 5 and 10 is : ", end="")
# print(random.uniform(5, 10))
# -----------------------------
# random.randint(1, 10)
# random.randrange(stop)
# random.randrange(1, 10, 2)
# ---------------------------------
# Syntax: math.comb(n, k)
# Parameters:
# n: A
# non - negative
# integer
# k: A
# non - negative
# integer
# Returns: an
# integer
# value
# which
# represents
# the
# number
# of
# ways
# to
# choose
# k
# items
# from n items
#
# without
# repetition and without
# order.
# import math
#
# n = 5
# k = 3
# nCk = math.comb(n, k)
# print(nCk)
# -------------------------------------
# # os
# # os
# import os
#
# '''os.chdir('C:\\Users\\S KRISHNA\\PycharmProjects\\mypython project')
# print(os.getcwd())'''
# os.mkdir('dir1')
# # os.rmdir('dir1')
#
# .......................................
# # create your module
#
# a, b = 45000, 10
# '''from dir1.file1 import increment
# from dir1.file2 import cut
# import dir1.file1
# import dir1.file2
# import file1,file2
# import dir1.file1 as f1
# import file2
# from file1 import increment,cut
# from file1 import increment
# from file1 import cut'''
#
# import sys
#
# sys.path.append('C:\\Users\\nagadeepthi.mr\\Downloads')
# import file1 as f
#
# inc = f.file1.increment(a, b)
# print(inc)
# dec = f.file1.cut(a, b)
# print(dec)
# --------------
#
#
# class file1:
#
#     def increment(a, b): return a + ((a * b) / 100)
#
#     def cut(a, b): return a - ((a * b) / 100)
